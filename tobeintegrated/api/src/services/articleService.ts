import ArticleManager from '../manager/articleManager';
import User from '../models/User';
import Article from '../models/Article';
import Favorite from '../models/Favorite';
import validator from 'validator';
import Result from '../utils/result';

export default class ArticleService {

    private articleManager = new ArticleManager()

    /**
     * Adds a new article
     *
     * @param articleId The id generated by WebContextApi
     * @param magazineId The id in which the article is located.
     * 
     * @return the error message or success
     */
    public async addArticle(articleId: number, magazineId: number): Promise<Result> {
        if (!articleId || !magazineId)
            return Result.error("Impossible d'ajouter un nouvel article si vous ne communiquez pas tous les infos requises.");

        const searchArticle = await this.articleManager.getArticleByIds(articleId, magazineId)
        if (searchArticle)
            return Result.error("L'article existe déjà dans ce magazine.");
        
        const article = await this.articleManager.addArticle(articleId, magazineId)
        if (!article)
            return Result.error("L'article n'a pas pu être ajouté.");
        return Result.success()
    }



    /**
     * Gets all the articles from a magazine
     * 
     * @param magazineId The id of the magazine
     * 
     * @return the error message or success
     */
    public async getArticlesByMagazineId(magazineId: number): Promise<Article[]> {
        if (!magazineId)
            return null

        const articles = await this.articleManager.getArticlesByMagazineId(magazineId)
        if (!articles)
            return null
        return articles
    }



    /**
     * Deletes an article from a magazine
     *
     * @param articleId The identifier of the article
     * @param magazineId The id in which the article is located
     * 
     * @return the error message or success
     */
    public async deleteArticle(articleId: number, magazineId: number): Promise<Result> {

        if (!articleId || !magazineId)
            return Result.error("Impossible de supprimer un article d'un magazine si vous ne communiquez pas les identifiants de l'article et/ou du magazine.")

        await this.articleManager.deleteArticle(articleId, magazineId)
        return Result.success()
    }



    /**
     * Adds a new article to his favorites
     *
     * @param userId The user ID
     * @param magazineId The id in which the article is located
     * @param articleId The id generated by WebContextApi
     * 
     * @return the error message or success
     */
    public async addFavoriteArticle(userId: number, magazineId: number, articleId: number): Promise<Result> {
        if (!userId || !magazineId || !articleId)
            return Result.error("Impossible d'ajouter un nouvel article à vos favoris si vous ne communiquez pas tous les infos requises.");

        const searchFavoriteArticle = await this.articleManager.getFavoriteArticleByIds(userId, magazineId, articleId)
        if (searchFavoriteArticle)
            return Result.error("L'article est déjà dans vos favoris.");
        
        const favorite = await this.articleManager.addFavoriteArticle(userId, magazineId, articleId)
        if (!favorite)
            return Result.error("L'article n'a pas pu être ajouté aux favoris.");
        return Result.success()
    }



    /**
     * Gets all the user's favorite articles
     * 
     * @param userId The user ID
     * 
     * @return the error message or success
     */
    public async getFavoritesArticlesByUserId(id: number): Promise<Favorite[]> {
        if (!id)
            return null

        const articles = await this.articleManager.getFavoritesArticlesByUserId(id)
        return articles
    }



    /**
     * Deletes an article from a magazine
     *
     * @param userId The identifier of the article
     * @param magazineId The id in which the article is located
     * @param articleId The id generated by WebContextApi
     * 
     * @return the error message or success
     */
    public async deleteFavoriteArticle(userId: number, magazineId: number, articleId: number): Promise<Result> {

        if (!userId || !magazineId || !articleId)
            return Result.error("Impossible de supprimer un article de vos favoris si vous ne communiquez pas les identifiants de l'article et/ou du magazine.")

        await this.articleManager.deleteFavoriteArticle(userId, magazineId, articleId)
        return Result.success()
    }
}